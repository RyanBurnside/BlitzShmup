Harvard Architecture
====================

This is a LOAD-STORE architecture. So most arithmetic operations and
such only use registers. There are specific LOAD and STORE instructions
to move data from memory to registers and back again.

Registers:
  RegSysU     - Array 2 ULong, names start at 0 index. These registeres are
                not normally targets of regular instructions and have special
                instructions to deal with them. so they live in a different
                operand space.
    PC        - Program counter
    ST        - Status Register: Carry, Zero, Sign, Overflow, Negative

  RegNamU     - Array 5 ULong, names start at 0 index. Named registers.
    RA        - Return Address Stack Index
    SL        - Sleep Ticks
    NB        - Num Bullets

  RegNamD     - Array 4 ULong, names start at 0 index. Named registers.
    SA        - Sub Angle
    AD        - Aim Direction
    BS        - Bullet Speed
    BZ        - Bullet Size

  Single V2D type # (maybe get rid of)
  PO        - Position (2D)

  TObject type
  BL        - Bullet List

  # Scalar registers
  RegU      - Array 32 ULong
  RegD      - Array 32 Double

  # Vector Registers
  RegV2D    - Array 32 SVec2D
  RegV3D    - Array 32 SVec3D
  RegV4D    - Array 32 SVec4D
  RegV2I    - Array 32 SVec2I
  RegV3I    - Array 32 SVec3I
  RegV4I    - Array 32 SVec4I
 
  # Matrix Registers
  RegM2D    - Array 32 SMat2D
  RegM3D    - Array 32 SMat3D
  RegM4D    - Array 32 SMat4D
  RegM2I    - Array 32 SMat2I
  RegM3I    - Array 32 SMat3I
  RegM4I    - Array 32 SMat4I

  # Quaternion Registers
  QRegQ     - Array 32 Quaternion Registers

Memory:
  memInst   - Array 256K MachInst types
  memData   - Array 256K MemValue types
  retStack  - Array 64K ULong: Return Address Stack (only affected by call/ret)

Operands Hierarchy:

The operands with a specified category are actually instantiatable. The rest
are base classes.

Category | Operand Type
---------------------------------------
         | Operand
         |   OpLiteral
lu       |     OpLitU
ld       |     OpLitD
         |     OpLitV
lv2d     |       OpLitV2D
lv3d     |       OpLitV3D
lv4d     |       OpLitV4D
lv2i     |       OpLitV2I
lv3i     |       OpLitV3I
lv4i     |       OpLitV4I
         |     OpLitM
lm2d     |       OpLitM2D
lm3d     |       OpLitM3D
lm4d     |       OpLitM4D
lm2i     |       OpLitM2I
lm3i     |       OpLitM3I
lm4i     |       OpLitM4I
lq       |     OpLitQ
         |   OpRegister
         |     OpRegSysU
rpc      |       OpRegPC
rst      |       OpRegST
rnu      |     OpRegNamU
rnd      |     OpRegNamD
ru       |     OpRegU
rd       |     OpRegD
         |     OpRegV
rpo      |       OpRegPO
rv2d     |       OpRegV2D
rv3d     |       OpRegV3D
rv4d     |       OpRegV4D
rv2i     |       OpRegV2I
rv3i     |       OpRegV3I
rv4i     |       OpRegV4I
         |     OpRegM
rm2d     |       OpRegM2D
rm3d     |       OpRegM3D
rm4d     |       OpRegM4D
rm2i     |       OpRegM2I
rm3i     |       OpRegM3I
rm4i     |       OpRegM4I
rq       |     OpRegQ
         |   OpMemory
ma       |     OpMemA
mb       |     OpMemB
mbi      |     OpMemBI
mba      |     OpMemBA
mbia     |     OpMemBIA
mbis     |     OpMemBIS
misa     |     OpMemISA
mbisa    |     OpMemBISA

Addressing modes for OpMemory:
  Used for the Instruction Memory or Data Memory as appropriate.

  "Absolute" is an: lu
  "Base" is one of: ru, rpc
  "Index" is one of: ru, rpc
  "Scale" is an: lu

  OpMemA:    Absolute
  OpMemB:    Base
  OpMemBI:   Base + Index
  OpMemBA:   Base + Absolute
  OpMemBIA:  Base + Index + Absolute
  OpMemBIS:  Base + (Index * Scale)
  OpMemISA:  (Index * Scale) + Absolute
  OpMemBISA: Base + (Index * Scale) + Absolute


Assembly Instructions:

An assembly instruction looks like: ADD ru, lu, lu
It gets encoded into MachOp encoding whose opcode is: ADD_ru_lu_lu
and which has an enum specifying its machine opcode value.
All of these MachOp codes are predictable like this, so we won't explicitly
specify them in this table. They will go into a giant enum later.

AssemOp  | Op0 | Op1 | Op2 | Op3 | Op4 | Op5 |
----------------------------------------------
NOP      |     |     |     |     |     |     |

YIELD    | ru  |     |     |     |     |     | # Stop BPU & return reg values

LITERAL  | rnu | lu  |     |     |     |     | # Put literal into reg
LITERAL  | rnd | ld  |     |     |     |     | 
LITERAL  | ru  | lu  |     |     |     |     |
LITERAL  | rd  | ld  |     |     |     |     |
LITERAL  | rv2d| lv2d|     |     |     |     |
LITERAL  | rv2i| lv2i|     |     |     |     |
LITERAL  | rv3d| lv3d|     |     |     |     |
LITERAL  | rv3i| lv3i|     |     |     |     |
LITERAL  | rv4d| lv4d|     |     |     |     |
LITERAL  | rv4i| lv4i|     |     |     |     |
LITERAL  | rm2d| lm2d|     |     |     |     |
LITERAL  | rm2i| lm2i|     |     |     |     |
LITERAL  | rm3d| lm3d|     |     |     |     |
LITERAL  | rm3i| lm3i|     |     |     |     |
LITERAL  | rm4d| lm4d|     |     |     |     |
LITERAL  | rm4i| lm4i|     |     |     |     |
LITERAL  | rq  | lq  |     |     |     |     |

IDENTITY | rm2d|     |     |     |     |     | # Put IDENTITY into it
IDENTITY | rm2i|     |     |     |     |     |
IDENTITY | rm3d|     |     |     |     |     |
IDENTITY | rm3i|     |     |     |     |     |
IDENTITY | rm4d|     |     |     |     |     |
IDENTITY | rm4i|     |     |     |     |     |
IDENTITY | rq  |     |     |     |     |     |

ADD      | rnu | rnu | lu  |     |     |     | # ADD for scalar U registers
ADD      | rnu | ru  | lu  |     |     |     |
ADD      | rnu | ru  | ru  |     |     |     |
ADD      | rnu | ru  | rnu |     |     |     |
ADD      | rnu | rnu | ru  |     |     |     |
ADD      | rnu | rnu | rnu |     |     |     |
ADD      | ru  | rnu | lu  |     |     |     |
ADD      | ru  | ru  | lu  |     |     |     |
ADD      | ru  | ru  | ru  |     |     |     |
ADD      | ru  | ru  | rnu |     |     |     |
ADD      | ru  | rnu | ru  |     |     |     |
ADD      | ru  | rnu | rnu |     |     |     |
ADD      | rnd | rnd | ld  |     |     |     | # ADD for scalar D regisers
ADD      | rnd | rd  | ld  |     |     |     |
ADD      | rnd | rd  | rd  |     |     |     |
ADD      | rnd | rd  | rnd |     |     |     |
ADD      | rnd | rnd | rd  |     |     |     |
ADD      | rnd | rnd | rnd |     |     |     |
ADD      | rd  | rnd | ld  |     |     |     |
ADD      | rd  | rd  | ld  |     |     |     |
ADD      | rd  | rd  | rd  |     |     |     |
ADD      | rd  | rd  | rnd |     |     |     |
ADD      | rd  | rnd | rd  |     |     |     |
ADD      | rd  | rnd | rnd |     |     |     |
ADD      | rv2d| rv2d| lv2d|     |     |     | # ADD group for V2D
ADD      | rv2d| rv2d| rv2d|     |     |     |
ADD      | rv2i| rv2i| lv2i|     |     |     | # ADD group for V2I
ADD      | rv2i| rv2i| rv2i|     |     |     |
ADD      | rv3d| rv3d| lv3d|     |     |     | # ADD group for V3D
ADD      | rv3d| rv3d| rv3d|     |     |     |
ADD      | rv3i| rv3i| lv3i|     |     |     | # ADD group for V3I
ADD      | rv3i| rv3i| rv3i|     |     |     |
ADD      | rv4d| rv4d| lv4d|     |     |     | # ADD group for V4D
ADD      | rv4d| rv4d| rv4d|     |     |     |
ADD      | rv4i| rv4i| lv4i|     |     |     | # ADD group for V4I
ADD      | rv4i| rv4i| rv4i|     |     |     |
ADD      | rm2d| rm2d| lm2d|     |     |     | # ADD group for M2D
ADD      | rm2d| rm2d| rm2d|     |     |     |
ADD      | rm2i| rm2i| lm2i|     |     |     | # ADD group for M2I
ADD      | rm2i| rm2i| rm2i|     |     |     |
ADD      | rm3d| rm3d| lm3d|     |     |     | # ADD group for M3D
ADD      | rm3d| rm3d| rm3d|     |     |     |
ADD      | rm3i| rm3i| lm3i|     |     |     | # ADD group for M3I
ADD      | rm3i| rm3i| rm3i|     |     |     |
ADD      | rm4d| rm4d| lm4d|     |     |     | # ADD group for M4D
ADD      | rm4d| rm4d| rm4d|     |     |     |
ADD      | rm4i| rm4i| lm4i|     |     |     | # ADD group for M4I
ADD      | rm4i| rm4i| rm4i|     |     |     |

ADC      | rnu | rnu | lu  |     |     |     | # ADC for scalar U registers
ADC      | rnu | ru  | lu  |     |     |     |
ADC      | rnu | ru  | ru  |     |     |     |
ADC      | rnu | ru  | rnu |     |     |     |
ADC      | rnu | rnu | ru  |     |     |     |
ADC      | rnu | rnu | rnu |     |     |     |
ADC      | ru  | rnu | lu  |     |     |     |
ADC      | ru  | ru  | lu  |     |     |     |
ADC      | ru  | ru  | ru  |     |     |     |
ADC      | ru  | ru  | rnu |     |     |     |
ADC      | ru  | rnu | ru  |     |     |     |
ADC      | ru  | rnu | rnu |     |     |     |

SUB      | rnu | rnu | lu  |     |     |     | # SUB for scalar U registers
SUB      | rnu | ru  | lu  |     |     |     |
SUB      | rnu | ru  | ru  |     |     |     |
SUB      | rnu | ru  | rnu |     |     |     |
SUB      | rnu | rnu | ru  |     |     |     |
SUB      | rnu | rnu | rnu |     |     |     |
SUB      | ru  | rnu | lu  |     |     |     |
SUB      | ru  | ru  | lu  |     |     |     |
SUB      | ru  | ru  | ru  |     |     |     |
SUB      | ru  | ru  | rnu |     |     |     |
SUB      | ru  | rnu | ru  |     |     |     |
SUB      | ru  | rnu | rnu |     |     |     |
SUB      | rnd | rnd | ld  |     |     |     | # SUB for scalar D regisers
SUB      | rnd | rd  | ld  |     |     |     |
SUB      | rnd | rd  | rd  |     |     |     |
SUB      | rnd | rd  | rnd |     |     |     |
SUB      | rnd | rnd | rd  |     |     |     |
SUB      | rnd | rnd | rnd |     |     |     |
SUB      | rd  | rnd | ld  |     |     |     |
SUB      | rd  | rd  | ld  |     |     |     |
SUB      | rd  | rd  | rd  |     |     |     |
SUB      | rd  | rd  | rnd |     |     |     |
SUB      | rd  | rnd | rd  |     |     |     |
SUB      | rd  | rnd | rnd |     |     |     |
SUB      | rv2d| rv2d| lv2d|     |     |     | # SUB group for V2D
SUB      | rv2d| rv2d| rv2d|     |     |     |
SUB      | rv2i| rv2i| lv2i|     |     |     | # SUB group for V2I
SUB      | rv2i| rv2i| rv2i|     |     |     |
SUB      | rv3d| rv3d| lv3d|     |     |     | # SUB group for V3D
SUB      | rv3d| rv3d| rv3d|     |     |     |
SUB      | rv3i| rv3i| lv3i|     |     |     | # SUB group for V3I
SUB      | rv3i| rv3i| rv3i|     |     |     |
SUB      | rv4d| rv4d| lv4d|     |     |     | # SUB group for V4D
SUB      | rv4d| rv4d| rv4d|     |     |     |
SUB      | rv4i| rv4i| lv4i|     |     |     | # SUB group for V4I
SUB      | rv4i| rv4i| rv4i|     |     |     |
SUB      | rm2d| rm2d| lm2d|     |     |     | # SUB group for M2D
SUB      | rm2d| rm2d| rm2d|     |     |     |
SUB      | rm2i| rm2i| lm2i|     |     |     | # SUB group for M2I
SUB      | rm2i| rm2i| rm2i|     |     |     |
SUB      | rm3d| rm3d| lm3d|     |     |     | # SUB group for M3D
SUB      | rm3d| rm3d| rm3d|     |     |     |
SUB      | rm3i| rm3i| lm3i|     |     |     | # SUB group for M3I
SUB      | rm3i| rm3i| rm3i|     |     |     |
SUB      | rm4d| rm4d| lm4d|     |     |     | # SUB group for M4D
SUB      | rm4d| rm4d| rm4d|     |     |     |
SUB      | rm4i| rm4i| lm4i|     |     |     | # SUB group for M4I
SUB      | rm4i| rm4i| rm4i|     |     |     |

UMUL     | ru  | rnu | lu  |     |     |     | # UMUL: 128bit ru hi, ru+1 lo
UMUL     | ru  | ru  | lu  |     |     |     |
UMUL     | ru  | ru  | ru  |     |     |     |
UMUL     | ru  | ru  | rnu |     |     |     |
UMUL     | ru  | rnu | ru  |     |     |     |
UMUL     | ru  | rnu | rnu |     |     |     |

MUL      | ru  | rnu | lu  |     |     |     | # MUL: 128bit, ru hi, ru+1 lo
MUL      | ru  | ru  | lu  |     |     |     |
MUL      | ru  | ru  | ru  |     |     |     |
MUL      | ru  | ru  | rnu |     |     |     |
MUL      | ru  | rnu | ru  |     |     |     |
MUL      | ru  | rnu | rnu |     |     |     |
MUL      | rd  | rnd | ld  |     |     |     | # MUL: rd is only result
MUL      | rd  | rd  | ld  |     |     |     |
MUL      | rd  | rd  | rd  |     |     |     |
MUL      | rd  | rd  | rnd |     |     |     |
MUL      | rd  | rnd | rd  |     |     |     |
MUL      | rd  | rnd | rnd |     |     |     |
MUL      | rv2d| rv2d| lv2d|     |     |     | # MUL group for V2D element-wise
MUL      | rv2d| rv2d| rv2d|     |     |     |
MUL      | rv2i| rv2i| lv2i|     |     |     | # MUL group for V2I element-wise
MUL      | rv2i| rv2i| rv2i|     |     |     |
MUL      | rv3d| rv3d| lv3d|     |     |     | # MUL group for V3D element-wise
MUL      | rv3d| rv3d| rv3d|     |     |     |
MUL      | rv3i| rv3i| lv3i|     |     |     | # MUL group for V3I element-wise
MUL      | rv3i| rv3i| rv3i|     |     |     |
MUL      | rv4d| rv4d| lv4d|     |     |     | # MUL group for V4D element-wise
MUL      | rv4d| rv4d| rv4d|     |     |     |
MUL      | rv4i| rv4i| lv4i|     |     |     | # MUL group for V4I element-wise
MUL      | rv4i| rv4i| rv4i|     |     |     |
MUL      | rm2d| rm2d| lm2d|     |     |     | # MUL group for M2D element-wise
MUL      | rm2d| rm2d| rm2d|     |     |     |
MUL      | rm2i| rm2i| lm2i|     |     |     | # MUL group for M2I element-wise
MUL      | rm2i| rm2i| rm2i|     |     |     |
MUL      | rm3d| rm3d| lm3d|     |     |     | # MUL group for M3D element-wise
MUL      | rm3d| rm3d| rm3d|     |     |     |
MUL      | rm3i| rm3i| lm3i|     |     |     | # MUL group for M3I element-wise
MUL      | rm3i| rm3i| rm3i|     |     |     |
MUL      | rm4d| rm4d| lm4d|     |     |     | # MUL group for M4D element-wise
MUL      | rm4d| rm4d| rm4d|     |     |     |
MUL      | rm4i| rm4i| lm4i|     |     |     | # MUL group for M4I element-wise
MUL      | rm4i| rm4i| rm4i|     |     |     |

DIV      | ru  | rnu | lu  |     |     |     | # DIV: U op0 <- op1 / op2
DIV      | ru  | ru  | lu  |     |     |     |
DIV      | ru  | ru  | ru  |     |     |     |
DIV      | ru  | ru  | rnu |     |     |     |
DIV      | ru  | rnu | ru  |     |     |     |
DIV      | ru  | rnu | rnu |     |     |     |
DIV      | rd  | rnd | ld  |     |     |     | # DIV: D op0 <- op1 / op2
DIV      | rd  | rd  | ld  |     |     |     |
DIV      | rd  | rd  | rd  |     |     |     |
DIV      | rd  | rd  | rnd |     |     |     |
DIV      | rd  | rnd | rd  |     |     |     |
DIV      | rd  | rnd | rnd |     |     |     |
DIV      | rv2d| rv2d| lv2d|     |     |     | # DIV group for V2D element-wise
DIV      | rv2d| rv2d| rv2d|     |     |     |
DIV      | rv2i| rv2i| lv2i|     |     |     | # DIV group for V2I element-wise
DIV      | rv2i| rv2i| rv2i|     |     |     |
DIV      | rv3d| rv3d| lv3d|     |     |     | # DIV group for V3D element-wise
DIV      | rv3d| rv3d| rv3d|     |     |     |
DIV      | rv3i| rv3i| lv3i|     |     |     | # DIV group for V3I element-wise
DIV      | rv3i| rv3i| rv3i|     |     |     |
DIV      | rv4d| rv4d| lv4d|     |     |     | # DIV group for V4D element-wise
DIV      | rv4d| rv4d| rv4d|     |     |     |
DIV      | rv4i| rv4i| lv4i|     |     |     | # DIV group for V4I element-wise
DIV      | rv4i| rv4i| rv4i|     |     |     |
DIV      | rm2d| rm2d| lm2d|     |     |     | # DIV group for M2D element-wise
DIV      | rm2d| rm2d| rm2d|     |     |     |
DIV      | rm2i| rm2i| lm2i|     |     |     | # DIV group for M2I element-wise
DIV      | rm2i| rm2i| rm2i|     |     |     |
DIV      | rm3d| rm3d| lm3d|     |     |     | # DIV group for M3D element-wise
DIV      | rm3d| rm3d| rm3d|     |     |     |
DIV      | rm3i| rm3i| lm3i|     |     |     | # DIV group for M3I element-wise
DIV      | rm3i| rm3i| rm3i|     |     |     |
DIV      | rm4d| rm4d| lm4d|     |     |     | # DIV group for M4D element-wise
DIV      | rm4d| rm4d| rm4d|     |     |     |
DIV      | rm4i| rm4i| lm4i|     |     |     | # DIV group for M4I element-wise
DIV      | rm4i| rm4i| rm4i|     |     |     |

ROLLL    | rnu | rnu | lu  |     |     |     | # ROLLL for scalar U registers
ROLLL    | rnu | ru  | lu  |     |     |     |
ROLLL    | rnu | ru  | ru  |     |     |     |
ROLLL    | rnu | ru  | rnu |     |     |     |
ROLLL    | rnu | rnu | ru  |     |     |     |
ROLLL    | rnu | rnu | rnu |     |     |     |
ROLLL    | ru  | rnu | lu  |     |     |     |
ROLLL    | ru  | ru  | lu  |     |     |     |
ROLLL    | ru  | ru  | ru  |     |     |     |
ROLLL    | ru  | ru  | rnu |     |     |     |
ROLLL    | ru  | rnu | ru  |     |     |     |
ROLLL    | ru  | rnu | rnu |     |     |     |

ROLLR    | rnu | rnu | lu  |     |     |     | # ROLLR for scalar U registers
ROLLR    | rnu | ru  | lu  |     |     |     |
ROLLR    | rnu | ru  | ru  |     |     |     |
ROLLR    | rnu | ru  | rnu |     |     |     |
ROLLR    | rnu | rnu | ru  |     |     |     |
ROLLR    | rnu | rnu | rnu |     |     |     |
ROLLR    | ru  | rnu | lu  |     |     |     |
ROLLR    | ru  | ru  | lu  |     |     |     |
ROLLR    | ru  | ru  | ru  |     |     |     |
ROLLR    | ru  | ru  | rnu |     |     |     |
ROLLR    | ru  | rnu | ru  |     |     |     |
ROLLR    | ru  | rnu | rnu |     |     |     |

ROLLCL   | rnu | rnu | lu  |     |     |     | # ROLLCL for scalar U registers
ROLLCL   | rnu | ru  | lu  |     |     |     |
ROLLCL   | rnu | ru  | ru  |     |     |     |
ROLLCL   | rnu | ru  | rnu |     |     |     |
ROLLCL   | rnu | rnu | ru  |     |     |     |
ROLLCL   | rnu | rnu | rnu |     |     |     |
ROLLCL   | ru  | rnu | lu  |     |     |     |
ROLLCL   | ru  | ru  | lu  |     |     |     |
ROLLCL   | ru  | ru  | ru  |     |     |     |
ROLLCL   | ru  | ru  | rnu |     |     |     |
ROLLCL   | ru  | rnu | ru  |     |     |     |
ROLLCL   | ru  | rnu | rnu |     |     |     |

ROLLCR   | rnu | rnu | lu  |     |     |     | # ROLLCR for scalar U registers
ROLLCR   | rnu | ru  | lu  |     |     |     |
ROLLCR   | rnu | ru  | ru  |     |     |     |
ROLLCR   | rnu | ru  | rnu |     |     |     |
ROLLCR   | rnu | rnu | ru  |     |     |     |
ROLLCR   | rnu | rnu | rnu |     |     |     |
ROLLCR   | ru  | rnu | lu  |     |     |     |
ROLLCR   | ru  | ru  | lu  |     |     |     |
ROLLCR   | ru  | ru  | ru  |     |     |     |
ROLLCR   | ru  | ru  | rnu |     |     |     |
ROLLCR   | ru  | rnu | ru  |     |     |     |
ROLLCR   | ru  | rnu | rnu |     |     |     |

SHIFTL   | rnu | rnu | lu  |     |     |     | # SHIFTL for scalar U registers
SHIFTL   | rnu | ru  | lu  |     |     |     |
SHIFTL   | rnu | ru  | ru  |     |     |     |
SHIFTL   | rnu | ru  | rnu |     |     |     |
SHIFTL   | rnu | rnu | ru  |     |     |     |
SHIFTL   | rnu | rnu | rnu |     |     |     |
SHIFTL   | ru  | rnu | lu  |     |     |     |
SHIFTL   | ru  | ru  | lu  |     |     |     |
SHIFTL   | ru  | ru  | ru  |     |     |     |
SHIFTL   | ru  | ru  | rnu |     |     |     |
SHIFTL   | ru  | rnu | ru  |     |     |     |
SHIFTL   | ru  | rnu | rnu |     |     |     |

SHIFTR   | rnu | rnu | lu  |     |     |     | # SHIFTR for scalar U registers
SHIFTR   | rnu | ru  | lu  |     |     |     |
SHIFTR   | rnu | ru  | ru  |     |     |     |
SHIFTR   | rnu | ru  | rnu |     |     |     |
SHIFTR   | rnu | rnu | ru  |     |     |     |
SHIFTR   | rnu | rnu | rnu |     |     |     |
SHIFTR   | ru  | rnu | lu  |     |     |     |
SHIFTR   | ru  | ru  | lu  |     |     |     |
SHIFTR   | ru  | ru  | ru  |     |     |     |
SHIFTR   | ru  | ru  | rnu |     |     |     |
SHIFTR   | ru  | rnu | ru  |     |     |     |
SHIFTR   | ru  | rnu | rnu |     |     |     |

ASHIFTL  | rnu | rnu | lu  |     |     |     | # ASHIFTL for scalar U registers
ASHIFTL  | rnu | ru  | lu  |     |     |     |
ASHIFTL  | rnu | ru  | ru  |     |     |     |
ASHIFTL  | rnu | ru  | rnu |     |     |     |
ASHIFTL  | rnu | rnu | ru  |     |     |     |
ASHIFTL  | rnu | rnu | rnu |     |     |     |
ASHIFTL  | ru  | rnu | lu  |     |     |     |
ASHIFTL  | ru  | ru  | lu  |     |     |     |
ASHIFTL  | ru  | ru  | ru  |     |     |     |
ASHIFTL  | ru  | ru  | rnu |     |     |     |
ASHIFTL  | ru  | rnu | ru  |     |     |     |
ASHIFTL  | ru  | rnu | rnu |     |     |     |

ASHIFTR  | rnu | rnu | lu  |     |     |     | # ASHIFTR for scalar U registers
ASHIFTR  | rnu | ru  | lu  |     |     |     |
ASHIFTR  | rnu | ru  | ru  |     |     |     |
ASHIFTR  | rnu | ru  | rnu |     |     |     |
ASHIFTR  | rnu | rnu | ru  |     |     |     |
ASHIFTR  | rnu | rnu | rnu |     |     |     |
ASHIFTR  | ru  | rnu | lu  |     |     |     |
ASHIFTR  | ru  | ru  | lu  |     |     |     |
ASHIFTR  | ru  | ru  | ru  |     |     |     |
ASHIFTR  | ru  | ru  | rnu |     |     |     |
ASHIFTR  | ru  | rnu | ru  |     |     |     |
ASHIFTR  | ru  | rnu | rnu |     |     |     |

# Fixme for permutations
AND      | rnu | rnu | lu  |     |     |     | # AND for scalar U registers
AND      | rnu | ru  | lu  |     |     |     |
AND      | rnu | ru  | ru  |     |     |     |
AND      | rnu | ru  | rnu |     |     |     |
AND      | rnu | rnu | ru  |     |     |     |
AND      | rnu | rnu | rnu |     |     |     |
AND      | ru  | rnu | lu  |     |     |     |
AND      | ru  | ru  | lu  |     |     |     |
AND      | ru  | ru  | ru  |     |     |     |
AND      | ru  | ru  | rnu |     |     |     |
AND      | ru  | rnu | ru  |     |     |     |
AND      | ru  | rnu | rnu |     |     |     |

OR       | rnu | rnu | lu  |     |     |     | # OR for scalar U registers
OR       | rnu | ru  | lu  |     |     |     |
OR       | rnu | ru  | ru  |     |     |     |
OR       | rnu | ru  | rnu |     |     |     |
OR       | rnu | rnu | ru  |     |     |     |
OR       | rnu | rnu | rnu |     |     |     |
OR       | ru  | rnu | lu  |     |     |     |
OR       | ru  | ru  | lu  |     |     |     |
OR       | ru  | ru  | ru  |     |     |     |
OR       | ru  | ru  | rnu |     |     |     |
OR       | ru  | rnu | ru  |     |     |     |
OR       | ru  | rnu | rnu |     |     |     |

XOR      | rnu | rnu | lu  |     |     |     | # XOR for scalar U registers
XOR      | rnu | ru  | lu  |     |     |     |
XOR      | rnu | ru  | ru  |     |     |     |
XOR      | rnu | ru  | rnu |     |     |     |
XOR      | rnu | rnu | ru  |     |     |     |
XOR      | rnu | rnu | rnu |     |     |     |
XOR      | ru  | rnu | lu  |     |     |     |
XOR      | ru  | ru  | lu  |     |     |     |
XOR      | ru  | ru  | ru  |     |     |     |
XOR      | ru  | ru  | rnu |     |     |     |
XOR      | ru  | rnu | ru  |     |     |     |
XOR      | ru  | rnu | rnu |     |     |     |

NOT      | ru  | ru  |     |     |     |     | # NOT group for Ulong
NOT      | ru  | rnu |     |     |     |     |
NOT      | rnu | ru  |     |     |     |     |
NOT      | rnu | rnu |     |     |     |     |

# Comparison and control instructions

# First part, traditional architecture

CMP that sets all flags
J? That uses those flags, like x86

# Second part op in CMP, sets all flags and T/F flag
CMP< r, r
JT/JF

# Third part, convenience instructions (which are actual instructions)
# act like second part
JMP< r, r, offset


